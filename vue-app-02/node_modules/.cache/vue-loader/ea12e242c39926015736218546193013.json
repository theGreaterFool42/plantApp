{"remainingRequest":"C:\\TestProjects\\plantApp\\vue-app-02\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\TestProjects\\plantApp\\vue-app-02\\src\\components\\measurements\\Measurement.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\TestProjects\\plantApp\\vue-app-02\\src\\components\\measurements\\Measurement.vue","mtime":1637833731828},{"path":"C:\\TestProjects\\plantApp\\vue-app-02\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1637249085714},{"path":"C:\\TestProjects\\plantApp\\vue-app-02\\node_modules\\babel-loader\\lib\\index.js","mtime":1637249087146},{"path":"C:\\TestProjects\\plantApp\\vue-app-02\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1637249085714},{"path":"C:\\TestProjects\\plantApp\\vue-app-02\\node_modules\\vue-loader\\lib\\index.js","mtime":1637249087400}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KDQovLyAgaW1wb3J0IFBsYW50U2VydmljZSBmcm9tICIuLi9zZXJ2aWNlcy9QbGFudFNlcnZpY2UiOw0KaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJzsNCmNvbnN0IGdyYWRpZW50cyA9IFsNCiAgWyIjMjIyIl0sDQogIFsiIzQyYjNmNCJdLA0KICBbInJlZCIsICJvcmFuZ2UiLCAieWVsbG93Il0sDQogIFsicHVycGxlIiwgInZpb2xldCJdLA0KICBbIiMwMGM2ZmYiLCAiI0YwRiIsICIjRkYwIl0sDQogIFsiI2Y3MjA0NyIsICIjZmZkMjAwIiwgIiMxZmVhZWEiXSwNCl07DQoNCmV4cG9ydCBkZWZhdWx0IHsNCiAgbmFtZTogIk1lYXN1cmVtZW50IiwNCiAgcHJvcHM6IFsncGlja2VyRGF0ZXMnLA0KICAgICAgICAgICdtZWFzdXJlbWVudFR5cGUnXSwNCiAgZGF0YSgpIHsNCiAgICByZXR1cm4gew0KICAgICAgc3RhcnREYXRlOiB0aGlzLnBpY2tlckRhdGVzWzBdLA0KICAgICAgZW5kRGF0ZTogdGhpcy5waWNrZXJEYXRlc1sxXSwNCiAgICAgIG1lYXN1cmVtZW50czogW10sDQogICAgICBtZWFzdXJlbWVudHNMZW5ndGg6ICcnLA0KICAgICAgcHJvY2Vzc2VkRGF0YTogW10sDQogICAgICBtYXhWYWx1ZXM6IDMyLA0KICAgICAgd2lkdGg6IDIsDQogICAgICByYWRpdXM6IDEwLA0KICAgICAgcGFkZGluZzogOCwNCiAgICAgIGxpbmVDYXA6ICJyb3VuZCIsDQogICAgICBncmFkaWVudDogZ3JhZGllbnRzWzVdLA0KICAgICAgZ3JhZGllbnREaXJlY3Rpb246ICJ0b3AiLA0KICAgICAgZ3JhZGllbnRzLA0KICAgICAgZmlsbDogZmFsc2UsDQogICAgICB0eXBlOiAidHJlbmQiLA0KICAgICAgYXV0b0xpbmVXaWR0aDogZmFsc2UsDQogICAgfTsNCiAgfSwNCiAgbWV0aG9kczoge30sDQogIC8vdGhlIGNhbGN1bGF0aW9uIGZvciB0aGUgcmVkdWNlZCBkYXRhc2V0IGlzbid0IHdvcmtpbmcgcmVsaWFibGUuIEknbSBub3Qgc3VyZSBpZg0KICAvL3RoZSBmaXJzdCBhbmQgdGhlIGxhc3QgdmFsdWVzIGFyZSBjb3JyZWN0DQogIC8vV2l0aCBkYXRhc2V0cyBiZWxvdyB0aGUgbWF4KDMyKSB0aGluZ3MgY2FuIGdvIHdyb25nDQogIC8vTW9pc3R1cmUgaXMgYWx3YXlzIDAsIGJlY2FzdWUgaWYgeW91IGdldCBhbiBhdmVyYWdlIG9mIDAgYW5kIDEgYW5kIGZsb29yIGl0LCBpdCBpcyAwDQogIGNyZWF0ZWQoKSB7DQogICAgYXhpb3MuZ2V0KCdodHRwOi8vbG9jYWxob3N0OjgwODAvYXBpL21lYXN1cmVtZW50cycNCiAgICAgICAgICArICcvJyArIHRoaXMubWVhc3VyZW1lbnRUeXBlDQogICAgICAgICAgKyAnLycgKyB0aGlzLiRyb3V0ZS5wYXJhbXMucGxhbnRJZA0KICAgICAgICAgICsgJy8nICsgJ2JldHdlZW4vJywNCiAgICAgICAgICB7IHBhcmFtczoge2JlZ2luOiB0aGlzLnN0YXJ0RGF0ZSwgZW5kOiB0aGlzLmVuZERhdGV9fSkNCiAgICAgIC50aGVuKHJlc3BvbnNlID0+IHsNCiAgICAgICAgICAvL2NvbnNvbGUubG9nKHJlc3BvbnNlLmRhdGEpDQogICAgICAgICAgdGhpcy5tZWFzdXJlbWVudHMgPSByZXNwb25zZS5kYXRhDQogICAgICAgICAgdGhpcy5tZWFzdXJlbWVudHNMZW5ndGggPSB0aGlzLm1lYXN1cmVtZW50cy5sZW5ndGgNCiAgICAgICAgICAvLyBjb25zb2xlLmxvZyh0aGlzLnN0YXJ0RGF0ZSkNCiAgICAgICAgICAvLyBjb25zb2xlLmxvZyh0aGlzLmVuZERhdGUpDQogICAgICAgICAgY29uc29sZS5sb2coIm1lYXN1cmVtZW50czogIiArIHRoaXMubWVhc3VyZW1lbnRzKQ0KICAgICAgICAgIGNvbnNvbGUubG9nKCJtZWFzdXJlbWVudHNMZW5ndGg6ICIgKyB0aGlzLm1lYXN1cmVtZW50c0xlbmd0aCkNCiAgICAgICAgICAvLyBjYWxjIGNvbXByZXNzZWQgYXJyYXkNCiAgICAgICAgICBpZiAodGhpcy5tZWFzdXJlbWVudHNMZW5ndGggPiB0aGlzLm1heFZhbHVlcykgew0KICAgICAgICAgICAgdmFyIGZhY3RvciA9IE1hdGguZmxvb3IodGhpcy5tZWFzdXJlbWVudHNMZW5ndGgvdGhpcy5tYXhWYWx1ZXMpDQogICAgICAgICAgICB2YXIgbW9kID0gdGhpcy5tZWFzdXJlbWVudHNMZW5ndGgldGhpcy5tYXhWYWx1ZXM7DQogICAgICAgICAgICB2YXIgcmVkdWNlZERhdGUgPSB0aGlzLm1lYXN1cmVtZW50cy5zbGljZSgwLCAodGhpcy5tZWFzdXJlbWVudHNMZW5ndGgtbW9kKSkNCiAgICAgICAgICAgIC8vY29uc29sZS5sb2coIm1vZDogIiArIG1vZCkNCiAgICAgICAgICAgIC8vY29uc29sZS5sb2coImZhY3RvcjogIiArIGZhY3RvcikNCiAgICAgICAgICAgIC8vY29uc29sZS5sb2coInJlZHVjZWREYXRhOiAiICsgcmVkdWNlZERhdGUpDQogICAgICAgICAgICB2YXIgdGVtcFZhbHVlID0gMDsNCiAgICAgICAgICAgIGZvciAobGV0IGtleSBpbiByZWR1Y2VkRGF0ZSkgew0KICAgICAgICAgICAgICB2YXIgbWVhc3VyZW1lbnQgPSByZWR1Y2VkRGF0ZVtrZXldOw0KICAgICAgICAgICAgICAgIHRlbXBWYWx1ZSs9bWVhc3VyZW1lbnQ7DQogICAgICAgICAgICAgIGlmKGtleSVmYWN0b3IgPT0gKGZhY3Rvci0xKSkgew0KICAgICAgICAgICAgICAgIHRlbXBWYWx1ZT1NYXRoLmZsb29yKHRlbXBWYWx1ZS9mYWN0b3IpDQogICAgICAgICAgICAgICAgdGhpcy5wcm9jZXNzZWREYXRhLnB1c2godGVtcFZhbHVlKTsNCiAgICAgICAgICAgICAgICB0ZW1wVmFsdWUgPSAwOw0KICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgIC8vY29uc29sZS5sb2coImtleTogIiArIGtleSk7DQogICAgICAgICAgICB9DQogICAgICAgICAgfQ0KICAgICAgICAgIGVsc2Ugew0KICAgICAgICAgICAgdGhpcy5wcm9jZXNzZWREYXRhID0gdGhpcy5tZWFzdXJlbWVudHM7DQogICAgICAgICAgfQ0KICAgICAgICAgIGNvbnNvbGUubG9nKCJwcm9jZXNzZWREYXRhOiAiICsgdGhpcy5wcm9jZXNzZWREYXRhKTsNCiAgICAgICAgICBjb25zb2xlLmxvZygicHJvY2Vzc2VkRGF0YUxlbmd0aDogIiArIHRoaXMucHJvY2Vzc2VkRGF0YS5sZW5ndGgpDQogICAgICB9KTsNCiAgICAvLyBQbGFudFNlcnZpY2UuZ2V0VGVtcE1lYXN1cmVtZW50cygpLnRoZW4oKHJlc3BvbnNlKSA9PiB7DQogICAgLy8gICB0aGlzLm1lYXN1cmVtZW50cyA9IHJlc3BvbnNlLmRhdGE7DQogICAgLy8gfSk7DQogIH0sDQp9Ow0K"},{"version":3,"sources":["Measurement.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Measurement.vue","sourceRoot":"src/components/measurements","sourcesContent":["<template>\r\n  <v-container>\r\n    <v-card-text>\r\n      <v-sheet color=\"teal lighten-3\">\r\n        <v-sparkline\r\n          :labels=processedData\r\n          :value=processedData\r\n          :gradient=\"gradient\"\r\n          :smooth=\"radius || false\"\r\n          :padding=\"padding\"\r\n          :line-width=\"width\"\r\n          :stroke-linecap=\"lineCap\"\r\n          :gradient-direction=\"gradientDirection\"\r\n          :fill=\"fill\"\r\n          :type=\"type\"\r\n          :auto-line-width=\"autoLineWidth\"\r\n          auto-draw\r\n        ></v-sparkline>\r\n      </v-sheet>\r\n    </v-card-text>\r\n    <!-- <v-card-text>\r\n      <div class=\"text-subtitle-1 font-weight-normal\">\r\n        {{measurementType}} in the last {{measurementsLength}} minutes\r\n      </div>\r\n    </v-card-text> -->\r\n  </v-container>\r\n</template>\r\n\r\n<script>\r\n//  import PlantService from \"../services/PlantService\";\r\nimport axios from 'axios';\r\nconst gradients = [\r\n  [\"#222\"],\r\n  [\"#42b3f4\"],\r\n  [\"red\", \"orange\", \"yellow\"],\r\n  [\"purple\", \"violet\"],\r\n  [\"#00c6ff\", \"#F0F\", \"#FF0\"],\r\n  [\"#f72047\", \"#ffd200\", \"#1feaea\"],\r\n];\r\n\r\nexport default {\r\n  name: \"Measurement\",\r\n  props: ['pickerDates',\r\n          'measurementType'],\r\n  data() {\r\n    return {\r\n      startDate: this.pickerDates[0],\r\n      endDate: this.pickerDates[1],\r\n      measurements: [],\r\n      measurementsLength: '',\r\n      processedData: [],\r\n      maxValues: 32,\r\n      width: 2,\r\n      radius: 10,\r\n      padding: 8,\r\n      lineCap: \"round\",\r\n      gradient: gradients[5],\r\n      gradientDirection: \"top\",\r\n      gradients,\r\n      fill: false,\r\n      type: \"trend\",\r\n      autoLineWidth: false,\r\n    };\r\n  },\r\n  methods: {},\r\n  //the calculation for the reduced dataset isn't working reliable. I'm not sure if\r\n  //the first and the last values are correct\r\n  //With datasets below the max(32) things can go wrong\r\n  //Moisture is always 0, becasue if you get an average of 0 and 1 and floor it, it is 0\r\n  created() {\r\n    axios.get('http://localhost:8080/api/measurements'\r\n          + '/' + this.measurementType\r\n          + '/' + this.$route.params.plantId\r\n          + '/' + 'between/',\r\n          { params: {begin: this.startDate, end: this.endDate}})\r\n      .then(response => {\r\n          //console.log(response.data)\r\n          this.measurements = response.data\r\n          this.measurementsLength = this.measurements.length\r\n          // console.log(this.startDate)\r\n          // console.log(this.endDate)\r\n          console.log(\"measurements: \" + this.measurements)\r\n          console.log(\"measurementsLength: \" + this.measurementsLength)\r\n          // calc compressed array\r\n          if (this.measurementsLength > this.maxValues) {\r\n            var factor = Math.floor(this.measurementsLength/this.maxValues)\r\n            var mod = this.measurementsLength%this.maxValues;\r\n            var reducedDate = this.measurements.slice(0, (this.measurementsLength-mod))\r\n            //console.log(\"mod: \" + mod)\r\n            //console.log(\"factor: \" + factor)\r\n            //console.log(\"reducedData: \" + reducedDate)\r\n            var tempValue = 0;\r\n            for (let key in reducedDate) {\r\n              var measurement = reducedDate[key];\r\n                tempValue+=measurement;\r\n              if(key%factor == (factor-1)) {\r\n                tempValue=Math.floor(tempValue/factor)\r\n                this.processedData.push(tempValue);\r\n                tempValue = 0;\r\n              }\r\n              //console.log(\"key: \" + key);\r\n            }\r\n          }\r\n          else {\r\n            this.processedData = this.measurements;\r\n          }\r\n          console.log(\"processedData: \" + this.processedData);\r\n          console.log(\"processedDataLength: \" + this.processedData.length)\r\n      });\r\n    // PlantService.getTempMeasurements().then((response) => {\r\n    //   this.measurements = response.data;\r\n    // });\r\n  },\r\n};\r\n</script>"]}]}