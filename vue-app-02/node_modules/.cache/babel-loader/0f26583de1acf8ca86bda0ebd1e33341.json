{"remainingRequest":"C:\\TestProjects\\plantApp\\vue-app-02\\node_modules\\babel-loader\\lib\\index.js!C:\\TestProjects\\plantApp\\vue-app-02\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!C:\\TestProjects\\plantApp\\vue-app-02\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\TestProjects\\plantApp\\vue-app-02\\src\\components\\measurements\\Measurement.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\TestProjects\\plantApp\\vue-app-02\\src\\components\\measurements\\Measurement.vue","mtime":1637557076430},{"path":"C:\\TestProjects\\plantApp\\vue-app-02\\babel.config.js","mtime":1637249464102},{"path":"C:\\TestProjects\\plantApp\\vue-app-02\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1637249085714},{"path":"C:\\TestProjects\\plantApp\\vue-app-02\\node_modules\\babel-loader\\lib\\index.js","mtime":1637249087146},{"path":"C:\\TestProjects\\plantApp\\vue-app-02\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1637249085714},{"path":"C:\\TestProjects\\plantApp\\vue-app-02\\node_modules\\vue-loader\\lib\\index.js","mtime":1637249087400}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc2xpY2UuanMiOwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLyAgaW1wb3J0IFBsYW50U2VydmljZSBmcm9tICIuLi9zZXJ2aWNlcy9QbGFudFNlcnZpY2UiOwppbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnOwp2YXIgZ3JhZGllbnRzID0gW1siIzIyMiJdLCBbIiM0MmIzZjQiXSwgWyJyZWQiLCAib3JhbmdlIiwgInllbGxvdyJdLCBbInB1cnBsZSIsICJ2aW9sZXQiXSwgWyIjMDBjNmZmIiwgIiNGMEYiLCAiI0ZGMCJdLCBbIiNmNzIwNDciLCAiI2ZmZDIwMCIsICIjMWZlYWVhIl1dOwpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogIlRlbXBNZWFzdXJlbWVudCIsCiAgcHJvcHM6IFsnc2x5ZGVyJywgJ21lYXN1cmVtZW50VHlwZSddLAogIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBtZWFzdXJlbWVudHM6IFtdLAogICAgICBtZWFzdXJlbWVudHNMZW5ndGg6ICcnLAogICAgICB3aWR0aDogMiwKICAgICAgcmFkaXVzOiAxMCwKICAgICAgcGFkZGluZzogOCwKICAgICAgbGluZUNhcDogInJvdW5kIiwKICAgICAgZ3JhZGllbnQ6IGdyYWRpZW50c1s1XSwKICAgICAgZ3JhZGllbnREaXJlY3Rpb246ICJ0b3AiLAogICAgICBncmFkaWVudHM6IGdyYWRpZW50cywKICAgICAgZmlsbDogZmFsc2UsCiAgICAgIHR5cGU6ICJ0cmVuZCIsCiAgICAgIGF1dG9MaW5lV2lkdGg6IGZhbHNlCiAgICB9OwogIH0sCiAgbWV0aG9kczoge30sCiAgY3JlYXRlZDogZnVuY3Rpb24gY3JlYXRlZCgpIHsKICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgYXhpb3MuZ2V0KCdodHRwOi8vbG9jYWxob3N0OjgwODAvYXBpL21lYXN1cmVtZW50cy8nICsgdGhpcy5tZWFzdXJlbWVudFR5cGUgKyAnLycgKyB0aGlzLiRyb3V0ZS5wYXJhbXMucGxhbnRJZCkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgdmFyIHNsaWNlZERhdGEgPSByZXNwb25zZS5kYXRhLnNsaWNlKHJlc3BvbnNlLmRhdGEubGVuZ3RoIC0gX3RoaXMuc2x5ZGVyLCByZXNwb25zZS5kYXRhLmxlbmd0aCk7CiAgICAgIF90aGlzLm1lYXN1cmVtZW50cyA9IHNsaWNlZERhdGE7CiAgICAgIF90aGlzLm1lYXN1cmVtZW50c0xlbmd0aCA9IHNsaWNlZERhdGEubGVuZ3RoOyAvL2NvbnNvbGUubG9nKHNsaWNlZERhdGEpOwogICAgfSk7IC8vIFBsYW50U2VydmljZS5nZXRUZW1wTWVhc3VyZW1lbnRzKCkudGhlbigocmVzcG9uc2UpID0+IHsKICAgIC8vICAgdGhpcy5tZWFzdXJlbWVudHMgPSByZXNwb25zZS5kYXRhOwogICAgLy8gfSk7CiAgfQp9Ow=="},{"version":3,"sources":["Measurement.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA;AACA,OAAA,KAAA,MAAA,OAAA;AACA,IAAA,SAAA,GAAA,CACA,CAAA,MAAA,CADA,EAEA,CAAA,SAAA,CAFA,EAGA,CAAA,KAAA,EAAA,QAAA,EAAA,QAAA,CAHA,EAIA,CAAA,QAAA,EAAA,QAAA,CAJA,EAKA,CAAA,SAAA,EAAA,MAAA,EAAA,MAAA,CALA,EAMA,CAAA,SAAA,EAAA,SAAA,EAAA,SAAA,CANA,CAAA;AASA,eAAA;AACA,EAAA,IAAA,EAAA,iBADA;AAEA,EAAA,KAAA,EAAA,CAAA,QAAA,EACA,iBADA,CAFA;AAIA,EAAA,IAJA,kBAIA;AACA,WAAA;AACA,MAAA,YAAA,EAAA,EADA;AAEA,MAAA,kBAAA,EAAA,EAFA;AAGA,MAAA,KAAA,EAAA,CAHA;AAIA,MAAA,MAAA,EAAA,EAJA;AAKA,MAAA,OAAA,EAAA,CALA;AAMA,MAAA,OAAA,EAAA,OANA;AAOA,MAAA,QAAA,EAAA,SAAA,CAAA,CAAA,CAPA;AAQA,MAAA,iBAAA,EAAA,KARA;AASA,MAAA,SAAA,EAAA,SATA;AAUA,MAAA,IAAA,EAAA,KAVA;AAWA,MAAA,IAAA,EAAA,OAXA;AAYA,MAAA,aAAA,EAAA;AAZA,KAAA;AAcA,GAnBA;AAoBA,EAAA,OAAA,EAAA,EApBA;AAqBA,EAAA,OArBA,qBAqBA;AAAA;;AACA,IAAA,KAAA,CAAA,GAAA,CAAA,4CAAA,KAAA,eAAA,GAAA,GAAA,GAAA,KAAA,MAAA,CAAA,MAAA,CAAA,OAAA,EACA,IADA,CACA,UAAA,QAAA,EAAA;AACA,UAAA,UAAA,GAAA,QAAA,CAAA,IAAA,CAAA,KAAA,CAAA,QAAA,CAAA,IAAA,CAAA,MAAA,GAAA,KAAA,CAAA,MAAA,EAAA,QAAA,CAAA,IAAA,CAAA,MAAA,CAAA;AACA,MAAA,KAAA,CAAA,YAAA,GAAA,UAAA;AACA,MAAA,KAAA,CAAA,kBAAA,GAAA,UAAA,CAAA,MAAA,CAHA,CAIA;AACA,KANA,EADA,CAQA;AACA;AACA;AACA;AAhCA,CAAA","sourcesContent":["<template>\r\n  <v-container>\r\n    <v-card-text>\r\n      <v-sheet color=\"teal lighten-3\">\r\n        <v-sparkline\r\n          :labels=measurements\r\n          :value=measurements\r\n          :gradient=\"gradient\"\r\n          :smooth=\"radius || false\"\r\n          :padding=\"padding\"\r\n          :line-width=\"width\"\r\n          :stroke-linecap=\"lineCap\"\r\n          :gradient-direction=\"gradientDirection\"\r\n          :fill=\"fill\"\r\n          :type=\"type\"\r\n          :auto-line-width=\"autoLineWidth\"\r\n          auto-draw\r\n        ></v-sparkline>\r\n      </v-sheet>\r\n    </v-card-text>\r\n    <v-card-text>\r\n      <div class=\"text-subtitle-1 font-weight-normal\">\r\n        {{measurementType}} in the last {{measurementsLength}} minutes\r\n      </div>\r\n    </v-card-text>\r\n  </v-container>\r\n</template>\r\n\r\n<script>\r\n//  import PlantService from \"../services/PlantService\";\r\nimport axios from 'axios';\r\nconst gradients = [\r\n  [\"#222\"],\r\n  [\"#42b3f4\"],\r\n  [\"red\", \"orange\", \"yellow\"],\r\n  [\"purple\", \"violet\"],\r\n  [\"#00c6ff\", \"#F0F\", \"#FF0\"],\r\n  [\"#f72047\", \"#ffd200\", \"#1feaea\"],\r\n];\r\n\r\nexport default {\r\n  name: \"TempMeasurement\",\r\n  props: ['slyder',\r\n          'measurementType'],\r\n  data() {\r\n    return {\r\n      measurements: [],\r\n      measurementsLength: '',\r\n      width: 2,\r\n      radius: 10,\r\n      padding: 8,\r\n      lineCap: \"round\",\r\n      gradient: gradients[5],\r\n      gradientDirection: \"top\",\r\n      gradients,\r\n      fill: false,\r\n      type: \"trend\",\r\n      autoLineWidth: false,\r\n    };\r\n  },\r\n  methods: {},\r\n  created() {\r\n      axios.get('http://localhost:8080/api/measurements/' + this.measurementType  + '/' + this.$route.params.plantId)\r\n      .then(response => {\r\n          var slicedData = response.data.slice(response.data.length - this.slyder, response.data.length);\r\n          this.measurements = slicedData;\r\n          this.measurementsLength = slicedData.length;\r\n          //console.log(slicedData);\r\n      });\r\n    // PlantService.getTempMeasurements().then((response) => {\r\n    //   this.measurements = response.data;\r\n    // });\r\n  },\r\n};\r\n</script>"],"sourceRoot":"src/components/measurements"}]}